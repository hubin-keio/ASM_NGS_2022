"""
Statistical analysis of the binding data from Starr et al. The input data
is generated from DMS mutation data with all synonymous mutations removed
and nonsynonymous mutations and wildtype kd averages.

It is generated by this command:

grep '^>' ASM_NGS_2022/seqs/binding_Kds.fasta \
|awk '{print substr($0, 2)}'|sed -e "s/ /, /g" \
> ASM_NGS_2022/datasets/mutation_binding_Kds.csv

It has this format:
A22C_R127G_E141D_L188V, log10Ka=8.720000267028809, ka_sd=nan
N13F, log10Ka=10.358182907104492, ka_sd=0.05153989791870117
V71K_P149L_N157T, log10Ka=6.0, ka_sd=nan
A18V_T148S_H189Y, log10Ka=10.135000228881836, ka_sd=0.02121301367878914
T63D_A89N, log10Ka=9.609999656677246, ka_sd=nan
P82S_P96L_T148D_F160R, log10Ka=6.0, ka_sd=nan
K48G_L60S, log10Ka=8.569999694824219, ka_sd=nan
R16C_R27G_K94D_F99W_N107M, log10Ka=6.960000038146973, ka_sd=1.357645034790039
wildtype, log10Ka=10.792753219604492, ka_sd=0.11116741597652435
P7L_D90F, log10Ka=10.029999732971191, ka_sd=nan
"""

import os
import re
import sys
# import time
import numpy as np
import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt

def load_data(csv: str) -> pd.DataFrame:
    """ Load binding csv file and return a dataframe
    """
    try:
        data = pd.read_csv(csv, sep=',',
                           names=['mutation', 'log10Ka', 'log10Ka_SD'])
    except FileNotFoundError:
        print(f'File not found error: {csv}.', file=sys.stderr)
        sys.exit(1)

    data['log10Ka'] = data['log10Ka'].str.slice(start=len('log10Ka=')+1)
    data['log10Ka_SD'] = data['log10Ka_SD'].str.slice(start=len('ka_sd=')+1)

    return data.astype({'mutation': str,
                        'log10Ka': np.float32,
                        'log10Ka_SD': np.float32})

def plot_stats(data: pd.DataFrame, colname, ref_point, save_under) -> None:
    """Take a dataframe and plot histogram

    colname: name of the column in dataframe for plotting

    ref_point: reference value from wildtype, which will be used to draw
    a vertical line with a label indicating its value.

    """
    sns.set_theme()
    sns.set_context('talk')

    plt.figure(figsize=(8, 6))
    fig = sns.histplot(data=data, x=colname, stat='percent', bins=10, kde=True)
    fig.axvline(ref_point, color='red')

    # percentage of mutations with increased
    increased_pct = data[data[colname] > wt_log10Ka].shape[0]/data.shape[0] * 100
    fig.text(7, 20, f'{increased_pct:.2f}%: increased Ka', fontsize=20)

    try:
        plt.savefig(save_under)
    except PermissionError:
        print(f'Cannot save file {save_under}.', file=sys.stderr)
        sys.exit(1)

# def get_evotree(data: pd.DataFrame, wildtype):
#     """ Get the 'evolution tree' representation from the DMS data set.

#     Arg:
#     data: a dataframe in the example format below

#                           mutation    log10Ka  log10Ka_SD
#     0       A22C_R127G_E141D_L188V   8.720000         NaN
#     1                         N13F  10.358183    0.051540
#     2             V71K_P149L_N157T   6.000000         NaN10Ka
#     """
#     p = re.compile('\d+(?=[A-Z_])')  # regex lookahead
#     increased = data[data['log10Ka'] > wildtype]
#     labels = list(increased['mutation'])
#     labels = [re.sub(p, '', x) for x in labels]  # remove all leading letters before numbers.
#     labels = sorted(labels)

#     evo_dict = {}
#     for mut in labels:
#         print(mut)
#         current_key = None
#         if '_' not in mut:
#             current_key = mut
#             evo_dict.add({current_key:1})
#         else:
#             if

#             print(current_key)
#             evo_dict.update({current_key: evo_dict[current_key]+1})
#     return evo_dict

def get_increased_kds(data: pd.DataFrame, colname: str) -> list:
    """Get the mutant labels for all mutations showing increased Kd.

    data: dataframe with mutant and kd
    colname: column name of interest
    """
    mut = data[data[colname] > wt_log10Ka]
    mut = list(mut['mutation'])

    p = re.compile(r'[A-Z](?=\d+)')  # regex lookahead
    labels = [re.sub(p, '', label) for label in mut]  # remove all leading letters before numbers.
    return sorted(labels)

def get_freq_mut(labels: list) -> pd.DataFrame:
    '''Get a decending ordered mutation frequency dataframe

    Arg:
    labels: a list of mutation labels
    '''
    freq_dict = {}
    for label in labels:
        if '_' in label:
            k = label.split('_')[0]
            if k in freq_dict.keys():
                freq_dict.update({k: freq_dict[k]+1})
            else:
                freq_dict.update({k: 1})
        else:
            if label in freq_dict.keys():
                freq_dict.update({label: freq_dict[label]+1})
            else:
                freq_dict.update({label: 1})
    data = pd.DataFrame(zip(freq_dict.keys(), freq_dict.values()),
                        columns=['mut', 'count'])
    data = data.sort_values('count', ascending=False)
    return data

def build_mut_tree(all_labels: list, start_label: str):
    p = '^[A-Z]'
    if re.match(p, all_labels[0]):
        p = re.compile(r'[A-Z](?=\d+)')  # regex lookahead
        all_labels = [re.sub(p, '', label) for label in all_labels]
    match_labels = []
    for label in all_labels:
        if label.startswith(start_label):
            match_labels.append(label)
    return match_labels

def load_expression_data(csv: str) -> pd.DataFrame:
    """ Load expression file and return a dataframe

    Arg:
    csv: the input csv file with expression data

    Return:
    pd.DataFrame with the following format

            expression       std   num                   labels
    0         8.770000  0.213217    14                    A105C
    1         7.820000       NaN     1  A105C_D112L_K128H_S147P
    2         8.260000       NaN     1              A105C_D112S
    3         8.050000       NaN     1              A105C_F134V
    4         7.840000       NaN     1        A105C_G117S_L162T
    ...            ...       ...   ...                      ...
    116253    7.170000       NaN     1               Y93W_Y119R
    116254    7.610000       NaN     1               Y93W_Y121P
    116255    8.240000       NaN     1   Y93W_Y123L_Y143E_Y159S
    116256    7.660000       NaN     1               Y93W_Y178S
    116257   10.292343  0.572130  8144                 wildtype
    """
    try:
        data = pd.read_csv(csv,
                           usecols=['aa_substitutions',
                                    'variant_class',
                                    'ML_meanF'],
                           dtype={'aa_substitutions':'string',
                                  'variant_class': 'string',
                                  'ML_meanF': 'float32'})
    except FileNotFoundError:
        print(f'File not found error: {csv}.', file=sys.stderr)
        sys.exit(1)

    mut_filter = ['>1 nonsynonymous',
                  '1 nonsynonymous',
                  'wildtype']  # skip 'stop' and 'synonymous'
    data = data.query('variant_class == @mut_filter')
    data = data.drop('variant_class', axis=1)
    data.columns = ['expression', 'labels']
    data = data[data['expression'].notna()]  # remove rows with NaN expression.
    data['labels'] = data['labels'].fillna('wildtype')
    data_g = data.groupby('labels')
    exp_df = pd.DataFrame({'expression': data_g['expression'].mean(),
                           'std': data_g['expression'].std(),
                           'num': data_g['expression'].count()})

    exp_df['labels'] = [label.replace(' ', '_') for label in exp_df.index]
    exp_df = exp_df.reset_index(drop=True)
    return exp_df



if __name__ == '__main__':
    # Directories and inputput output file settings
    ROOT_DIR = os.path.abspath(os.path.dirname(__file__))
    ROOT_DIR = os.path.abspath(os.path.join(ROOT_DIR, '..'))
    DATA_DIR = os.path.join(ROOT_DIR, 'datasets')
    PLOTS_DIR = os.path.join(ROOT_DIR, 'plots')

    binding_csv = os.path.join(DATA_DIR, 'mutation_binding_Kds.csv')
    expression_csv = os.path.join(DATA_DIR, 'expression_meanFs.csv')
    hist_plot_file = os.path.join(PLOTS_DIR, 'mutation_binding_Kds.png')
    wt_log10Ka=10.792753219604492

    bind_data = load_data(binding_csv)
    # plot_stats(data, 'log10Ka', wt_log10Ka, hist_plot_file)
    exp_data = load_expression_data(expression_csv)
